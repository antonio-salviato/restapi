#include 'totvs.ch'
#include 'tlpp-core.th'
#include 'tlpp-rest.th'

class CARGA from fwAdapterBaseV2

	public method new() constructor

	@get('/carg')
	public method lista_fornecedores() as logical

end class

method new() class CARGA; return self


method lista_fornecedores() class CARGA

	Local lRPC
	Local nError        as numeric
	Local cError        as character

	Local jQueryStr     as json
	Local jResp         as json

	Local cSQL          as character
	Local cWhere        as character
	Local nSize         as numeric
	Local nPage         as numeric
	Local cOrder        as character
	

	IF type('cEmpAnt') <> 'C'
		rpcSetEnv('99','01')
		lRPC            := .T.
	EndIF

	try

		jQueryStr           := oRest:getQueryRequest()


		nSize               := jQueryStr['pageSize' ]
		nPage               := jQueryStr['page'     ]
		cOrder              := jQueryStr['order'    ]

		nSize               := if(empty(nSize),10,nSize)
		nPage               := if(empty(nPage),1 ,nPage)

		cSQL                := "SELECT #QueryFields# FROM " + retSqlName("DAK") + " DAK"
		cSQL                += CRLF + "WHERE #QueryWhere# "

		cWhere              := "D_E_L_E_T_ = ' ' "

		_Super:new('GET',.T.)
		::addMapFields('cod'    ,'DAK_COD'  ,.T.)
		::addMapFields('pedido'    ,'DAK_PEDIDO'  ,.T.)
		::addMapFields('data'    ,'DAK_DATA'  ,.T.)
		::addMapFields('retorno','DAK_DTACCA',.T.)


		::setQuery(cSQL)
		::setWhere(cWhere)
		::setPageSize(nSize)
		::setPage(nPage)
		::setOrder(cOrder)

		IF ::execute()

			::fillGetResponse()
			oRest:setResponse(::getJsonResponse())
		
		Else

			nError := ::getCode()
			cError := ::getMessage()

			jResp := jsonObject():new()
			jResp['error'] := cError

			oRest:setFault(jResp:toJson())

		EndIF

	catch err

		cError          := err:errorstack

		jResp           := jsonObject():new()
		jResp['error']  := cError

		oRest:setFault(jResp:toJson())

	endtry

	IF lRPC
		rpcClearEnv()
	EndIF

return .T.
